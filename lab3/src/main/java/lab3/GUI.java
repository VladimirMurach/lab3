/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lab3;

import java.awt.Font;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Владимир
 */
public class GUI extends javax.swing.JFrame {

    private Manager manager;
    private JFileChooser fileChooser;
    DefaultTreeModel model;
    DefaultMutableTreeNode reactors = new DefaultMutableTreeNode("Reactors");

    /**
     * Creates new form GUI
     */
    public GUI() {
        fileChooser = new JFileChooser(System.getProperty("user.dir"));
        manager = new Manager();
        initComponents();
        Font font = new Font("Font", Font.PLAIN, 24);
        importButton.setFont(font);
        exitButton.setFont(font);
        treeButton.setFont(font);
        countryButton.setFont(font);
        regionButton.setFont(font);
        operatorButton.setFont(font);
        databaseButton.setFont(font);
        load();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aggregationWindow = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        aggregationTable = new javax.swing.JTable();
        closeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        reactorTree = new javax.swing.JTree();
        exitButton = new javax.swing.JButton();
        importButton = new javax.swing.JButton();
        treeButton = new javax.swing.JButton();
        databaseButton = new javax.swing.JButton();
        regionButton = new javax.swing.JButton();
        countryButton = new javax.swing.JButton();
        operatorButton = new javax.swing.JButton();

        aggregationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Объем ежегодной загрузки, т", "Год"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(aggregationTable);
        if (aggregationTable.getColumnModel().getColumnCount() > 0) {
            aggregationTable.getColumnModel().getColumn(1).setMinWidth(100);
            aggregationTable.getColumnModel().getColumn(2).setMaxWidth(50);
        }

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout aggregationWindowLayout = new javax.swing.GroupLayout(aggregationWindow.getContentPane());
        aggregationWindow.getContentPane().setLayout(aggregationWindowLayout);
        aggregationWindowLayout.setHorizontalGroup(
            aggregationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aggregationWindowLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        aggregationWindowLayout.setVerticalGroup(
            aggregationWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aggregationWindowLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(reactorTree);

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        treeButton.setText("Tree");
        treeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treeButtonActionPerformed(evt);
            }
        });

        databaseButton.setText("Database");
        databaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseButtonActionPerformed(evt);
            }
        });

        regionButton.setText("Region");
        regionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regionButtonActionPerformed(evt);
            }
        });

        countryButton.setText("Country");
        countryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryButtonActionPerformed(evt);
            }
        });

        operatorButton.setText("Operator");
        operatorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operatorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(importButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(treeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                    .addComponent(databaseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(regionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(countryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(operatorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(importButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(treeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(databaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(regionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(operatorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        fileChooser.setDialogTitle("Выбор файла");
        fileChooser.showOpenDialog(GUI.this);
        manager.importFile(fileChooser.getSelectedFile());
    }//GEN-LAST:event_importButtonActionPerformed

    private void treeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treeButtonActionPerformed
        ArrayList<ReactorType> reactorTypes = manager.getReactorTypes();
        try {
            for (ReactorType reactorType : reactorTypes) {
                reactors.add(createNode(reactorType));
            }
        } catch (NullPointerException e) {
            System.out.println("Ничего не прочитано");
        }
        model = (DefaultTreeModel) reactorTree.getModel();
        model.setRoot(reactors);
        reactorTree.setModel(model);
    }//GEN-LAST:event_treeButtonActionPerformed

    private void databaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseButtonActionPerformed
        manager.readDatabase();
    }//GEN-LAST:event_databaseButtonActionPerformed

    private void regionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regionButtonActionPerformed
        createTable("Регион", manager.aggregateByRegion());
    }//GEN-LAST:event_regionButtonActionPerformed

    private void countryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryButtonActionPerformed
        createTable("Страна", manager.aggregateByCountry());
    }//GEN-LAST:event_countryButtonActionPerformed

    private void operatorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operatorButtonActionPerformed
        createTable("Оператор", manager.aggregateByOperator());
    }//GEN-LAST:event_operatorButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        aggregationWindow.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable aggregationTable;
    private javax.swing.JDialog aggregationWindow;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton countryButton;
    private javax.swing.JButton databaseButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton importButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton operatorButton;
    private javax.swing.JTree reactorTree;
    private javax.swing.JButton regionButton;
    private javax.swing.JButton treeButton;
    // End of variables declaration//GEN-END:variables

    private void load() {
        model = (DefaultTreeModel) reactorTree.getModel();
        model.setRoot(reactors);
        reactorTree.setModel(model);
    }

    private DefaultMutableTreeNode createNode(ReactorType reactorType) {
        DefaultMutableTreeNode node = new DefaultMutableTreeNode(reactorType.getType());
        node.add(new DefaultMutableTreeNode("Burnup: " + reactorType.getBurnup()));
        node.add(new DefaultMutableTreeNode("KPD: " + reactorType.getKpd()));
        node.add(new DefaultMutableTreeNode("Enrichment: " + reactorType.getEnrichment()));
        node.add(new DefaultMutableTreeNode("Thermal capacity: " + reactorType.getThermalCapacity()));
        node.add(new DefaultMutableTreeNode("Electrical capacity: " + reactorType.getElectricalCapacity()));
        node.add(new DefaultMutableTreeNode("Life time: " + reactorType.getLifeTime()));
        node.add(new DefaultMutableTreeNode("First load: " + reactorType.getFirstLoad()));
        node.add(new DefaultMutableTreeNode("Source: " + reactorType.getSource()));
        return node;
    }

    private void createTable(String title, Map<String, Map<Integer, Double>> map) {
        if (map != null) {
            aggregationTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]{},
                    new String[]{
                        title, "Объем ежегодной загрузки, т", "Год"
                    }
            ) {
                Class[] types = new Class[]{
                    java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
                };
                boolean[] canEdit = new boolean[]{
                    false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
            DefaultTableModel model = (DefaultTableModel) aggregationTable.getModel();
            for (Map.Entry<String, Map<Integer, Double>> entry : map.entrySet()) {
                Map<Integer, Double> fuelLoad = entry.getValue();
                for (Map.Entry<Integer, Double> load : fuelLoad.entrySet()) {
                    model.addRow(new Object[]{entry.getKey(), Math.round(load.getValue()), load.getKey()});
                }
            }
            aggregationTable.getColumnModel().getColumn(2).setMaxWidth(50);
            aggregationWindow.setSize(480, 500);
            aggregationWindow.setVisible(rootPaneCheckingEnabled);
        }
    }
}
